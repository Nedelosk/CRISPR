buildscript {
	repositories {
		maven { url = "https://files.minecraftforge.net/maven" }
		jcenter()
		mavenCentral()
	}
	// This is only here while FG is under active development
	configurations.classpath {
		resolutionStrategy {
			cacheDynamicVersionsFor 10, "seconds"
			cacheChangingModulesFor 0, "seconds"
		}
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
	}
}

plugins {
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}
apply plugin: 'idea'
apply plugin: "net.minecraftforge.gradle"

version = version_major + "." + version_minor + "." + version_patch
group = "genetics" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

//adds the build number to the end of the version string if on a build server
if (System.getenv().BUILD_NUMBER != null) {
	version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
	maven { url 'http://repo1.maven.org/maven2' }
}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

dependencies {
	minecraft([
		group  : "${project.forgegroup}",
		name   : "forge",
		version: "${project.mcversion}-${project.forgeversion}"
	])
	testCompile([
		group: "junit",
		name: "junit",
		version: "4.12"
	])
}

minecraft {
	//	runDir = "run"
	//	replace "@VERSION@", project.version
	mappings channel: "snapshot", version: "${project.mcp_mappings}".toString()
	
	accessTransformer = file('src/main/resources/META-INF/genetics_at.cfg')

	runs {
		client = {
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
			source sourceSets.api
		}
		server = {
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
			source sourceSets.api
		}
	}
}

// prevent java 8's strict doclint for javadocs from failing builds
if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "api"
	from sourceSets.api.output

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

task("uploadJars", dependsOn: "build") {
	description = "uploads JARs"
	if (project.hasProperty("local_maven")) {
		apply plugin: "maven"
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}

idea {
	module {
		for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
			File excludeDir = new File(projectDir, excludeDirName);
			excludeDirs.add(excludeDir)
		}
	}
}
